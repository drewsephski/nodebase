generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String     @unique
  emailVerified Boolean    @default(false)
  image         String?
  polarCustomerId String?   // Add this field
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  workflows     Workflow[]
  accounts      Account[]
  sessions      Session[]
  credentials   Credential[]

  @@map("user")
}

model Credential {
  id          String        @id @default(cuid())
  name        String
  type        CredentialType
  data        Json
  description String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credential")
}

enum CredentialType {
  API_KEY
  DATABASE
  OAUTH2
  BASIC_AUTH
  BEARER_TOKEN
  CUSTOM
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Workflow {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  connections Connection[]
  nodes       Node[]
  executions  Execution[]
  jobs        ExecutionJob[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Node {
  id                String       @id @default(cuid())
  name              String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  type              NodeType
  position          Json
  data              Json         @default("{}")
  workflowId        String
  outputConnections Connection[] @relation("FromNode")
  inputConnections  Connection[] @relation("ToNode")
  workflow          Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model Connection {
  id         String   @id @default(cuid())
  workflow   String
  fromNodeId String
  toNodeId   String
  fromOutput String   @default("main")
  toInput    String   @default("main")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  fromNode   Node     @relation("FromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)
  toNode     Node     @relation("ToNode", fields: [toNodeId], references: [id], onDelete: Cascade)
  Workflow   Workflow @relation(fields: [workflow], references: [id], onDelete: Cascade)

  @@unique([fromNodeId, fromOutput, toNodeId, toInput])
}

model Execution {
  id          String   @id @default(cuid())
  workflowId  String
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  triggeredBy String?  // user ID or "webhook" or "schedule"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  steps         ExecutionStep[]
  logs          ExecutionLog[]

  @@map("execution")
}

model ExecutionStep {
  id          String   @id @default(cuid())
  executionId String
  nodeId      String
  status      StepStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  input       Json?    // Input data for this step
  output      Json?    // Output data from this step
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_step")
}

model ExecutionLog {
  id          String   @id @default(cuid())
  executionId String
  level       LogLevel @default(INFO)
  message     String
  nodeId      String?  // Which node generated this log
  data        Json?    // Additional structured data
  createdAt   DateTime @default(now())

  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_log")
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum NodeType {
  INITIAL
  MANUAL_TRIGGER
  HTTP_REQUEST

  // Triggers (3 new)
  WEBHOOK_TRIGGER
  SCHEDULE_TRIGGER

  // Communication (4 new)
  SLACK_SEND_MESSAGE
  DISCORD_SEND_MESSAGE
  EMAIL_SEND
  TELEGRAM_SEND_MESSAGE

  // AI Services (3 new)
  OPENAI_CHAT
  ANTHROPIC_CHAT
  GOOGLE_GEMINI_CHAT

  // Data Operations (4 new)
  JSON_PARSE
  FILTER
  SET_VARIABLE
  CODE_EXECUTE

  // Database (2 new)
  POSTGRES_QUERY
  MONGODB_QUERY

  // Utilities (3 new)
  DELAY
  IF_CONDITION
  MERGE
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum StepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}

model ExecutionJob {
  id          String   @id @default(cuid())
  workflowId  String
  userId      String
  triggerType String   // "webhook" or "schedule"
  status      JobStatus @default(PENDING)
  scheduledAt DateTime?
  webhookData Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("execution_job")
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
